/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id "com.github.spotbugs" version "${spotbugsPluginVersion}"
    id "com.github.johnrengelman.shadow" version "${shadowPluginVersion}"
    id "de.undercouch.download" version "${undercouchDownloadPluginVersion}"
    id "net.researchgate.release" version "${researchgateReleasePluginVersion}"
}

ext.ballerinaLangVersion = project.ballerinaLangVersion

allprojects {
    group = 'org.ballerinalang'
    version = project.version

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/ballerina-lang'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-sql'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-io'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-time'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-stringutils'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-runtime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-system'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-crypto'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-log'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-config'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerinai-transaction'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-task'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-file'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-reflect'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-mime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-cache'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-auth'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-http'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
}

subprojects {
    apply plugin: 'java'

    configurations {
        externalJars
        ballerinaStdLibs
    }

    dependencies {
        compile group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
        compile group: 'org.ballerinalang', name: 'sql-native', version: "${stdlibSqlVersion}"

        ballerinaStdLibs group: 'org.ballerinalang', name: 'sql-ballerina', version: "${stdlibSqlVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'io-ballerina', version: "${stdlibIoVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'time-ballerina', version: "${stdlibTimeVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'stringutils-ballerina', version: "${stdlibStringUtilsVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'system-ballerina', version: "${stdlibSystemVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'runtime-ballerina', version: "${stdlibRuntimeVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'crypto-ballerina', version: "${stdlibCryptoVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'log-ballerina', version: "${stdlibLogVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'config-ballerina', version: "${stdlibConfigVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'file-ballerina', version: "${stdlibFileVersion}"

        ballerinaStdLibs group: 'org.ballerinalang', name: 'transaction-ballerina', version: "${stdlibTransactionVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'task-ballerina', version: "${stdlibTaskVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'reflect-ballerina', version: "${stdlibReflectVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'mime-ballerina', version: "${stdlibMimeVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'cache-ballerina', version: "${stdlibCacheVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'auth-ballerina', version: "${stdlibAuthVersion}"
        ballerinaStdLibs group: 'org.ballerinalang', name: 'http-ballerina', version: "${stdlibHttpVersion}"

        externalJars (group: 'com.oracle.database.jdbc', name: 'ojdbc10', version: "${oracleDBDriverVersion}") {
            transitive = false
        }
    }
}

def moduleVersion = project.version
if (moduleVersion.indexOf('-') != -1) {
    moduleVersion = moduleVersion.substring(0, moduleVersion.indexOf('-'))
}

release {
    failOnPublishNeeded = false

    buildTasks = ['build']
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v$version'

    git {
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task build {
    dependsOn('oracledb-ballerina:build')
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
        xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
        html.destination = new File("${buildDir}/reports/jacoco/report.html")
        csv.destination = new File("${buildDir}/reports/jacoco/report.csv")
    }

    onlyIf = {
        true
    }
}

description = 'Ballerina - Oracle'
